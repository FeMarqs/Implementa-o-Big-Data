# -*- coding: utf-8 -*-
"""PySpark_Kart_B.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kcMxbSuNPvHQPJzDzvCNJwTSr43Tu2u2
"""

pip install pyspark

from pyspark.sql import SparkSession
from pyspark.sql.functions import col, sum as spark_sum
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import pandas as pd

# Inicializando a SparkSession
spark = SparkSession.builder.master("local").appName("Pilotos").getOrCreate()

# Dados simulados
pilotos = ['Senna', 'Massa', 'Barrichello', 'Schummacker', 'Hamilton', 'Takumasato']
colunas = ['v1', 'v2', 'v3', 'v4', 'v5', 'v6', 'v7', 'v8', 'v9', 'v10']
dados = [[float(x) for x in np.random.uniform(6, 10, size=10)] for _ in pilotos]

# Criando o DataFrame PySpark
#(Dados são gerados e transformados diretamente em PySpark sem o uso de pandas intermediário)
df_spark = spark.createDataFrame([(piloto, *linha) for piloto, linha in zip(pilotos, dados)],
                                 schema=["piloto"] + colunas)

# Calculando o tempo total por piloto
#(Realizado em uma única etapa com a soma de colunas)
df_spark = df_spark.withColumn("total_time", sum(col(c) for c in colunas))

# Ordenando e coletando os resultados para visualização
#(Apenas o necessário (piloto e total_time) é coletado para visualização com pandas)
result = df_spark.select("piloto", "total_time").orderBy("total_time").toPandas()

#Campeão
champion = result.iloc[0]["piloto"]
min_time = result.iloc[0]["total_time"]

print(f"O campeão foi {champion}, com {min_time:.2f} segundos!")

# Gráfico de barras horizontais
plt.figure(figsize=(10, 6))
sns.barplot(data=result, y="piloto", x="total_time", palette="viridis")

plt.title("Tempo Total gasto por Piloto", fontsize=16)
plt.ylabel("Pilotos da disputa", fontsize=12)
plt.xlabel("Tempo Total Utilizado (segundos)", fontsize=12)
plt.grid(axis="x", linestyle="--", alpha=0.7)
plt.show()

# Gráfico de pizza
plt.figure(figsize=(8, 8))
plt.pie(
    result["total_time"],
    labels=result["piloto"],
    autopct="%1.1f%%",
    startangle=140,
    colors=sns.color_palette("coolwarm", len(result)),
    wedgeprops={"edgecolor": "black", "linewidth": 1}
)

plt.title("Total de Tempo gasto por Piloto", fontsize=16)
plt.show()